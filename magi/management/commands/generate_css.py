# -*- coding: utf-8 -*-
import os, pkg_resources
from django.core.management.base import BaseCommand
from django.conf import settings as django_settings
from magi.settings import (
    USER_COLORS,
    COLOR,
    SECONDARY_COLOR,
    ACCENT_COLOR,
    SEASONS,
)
from magi.seasons import CSS_SETTINGS

def generateLessColors(settings):
    resource_package = 'magi'
    resource_path = os.path.join('static', 'less', 'per-color-generator.less')
    template = unicode(pkg_resources.resource_string(resource_package, resource_path))

    color = settings.get('color', COLOR)
    secondary_color = settings.get('secondary_color', SECONDARY_COLOR)
    accent_color = settings.get('accent_color', ACCENT_COLOR)

    less = u"""
@mainColor: {color};
@secondaryColor: {secondary_color};
{accent_include}

html {{
    .setup-sidebar(@mainColor);
    .magicircles(@mainColor, @secondaryColor{accent_parameter});
}}

""".format(
    color=color, secondary_color=secondary_color,
    accent_include='' if not accent_color else u'@accentColor: {};'.format(accent_color),
    accent_parameter='' if not accent_color else ', @accentColor',
)
    for color in (USER_COLORS or []):
        raw_color, verbose_color, css_class, hex_code = [unicode(v) for v in color]
        less += template.replace('HEX_COLOR', hex_code).replace(
            'COLOR_NAME', raw_color).replace('COLOR', css_class)
    return less

def generateStylesheets(name=None, settings={}):
    """
    Generates local.less and prod.less
    Then compiles prod.less into style.css
    """

    less = generateLessColors(settings)

    extra_local = ''
    extra_prod = ''
    if name:
        resource_package = 'magi'
        resource_path = os.path.join('static', 'less', '{}.less'.format(name))
        try:
            magi_has_content = unicode(pkg_resources.resource_string(resource_package, resource_path))
        except IOError:
            magi_has_content = False
        local_path = os.path.join(
            django_settings.BASE_DIR, django_settings.SITE, 'static', 'less', '{}.less'.format(name))
        local_has_content = os.path.exists(local_path)
        if local_has_content and magi_has_content:
            f = open(local_path, 'r')
            extra_local = u'{}\n{}'.format(magi_has_content, f.read())
            f.close()
            extra_prod = """
@import "../../../env/lib/python2.7/site-packages/magi/static/less/{}.less";
@import "{}.less";
""".format(name, name)
        elif local_has_content:
            extra_local = '@import "{}.less";'.format(name)
            extra_prod = extra_local
        elif magi_has_content:
            extra_local = '@import "{}.less";'.format(name)
            extra_prod = '@import "../../../env/lib/python2.7/site-packages/magi/static/less/{}.less";'.format(name)

    local_less = """
// This is a generated file. Do not edit this file manually
// To re-generate this file, use `python manage.py generate_css

@import "main.less";
@import "mixins/magicircles.less";

{less}

@import "style.less";

{extra}
    """.format(less=less, extra=extra_local)

    if name:
        filename = u'{}_theme.less'.format(name)
    else:
        filename = 'local.less'
    path = os.path.join(django_settings.BASE_DIR, django_settings.SITE, 'static', 'less', filename)

    with open(path, 'w+') as f:
        f.write(local_less.encode('UTF-8'))
        f.close()

    prod_less = """
// This is a generated file. Do not edit this file manually
// To re-generate this file, use `python manage.py generate_css

@import "../../../env/lib/python2.7/site-packages/magi/static/less/main.less";
@import "../../../env/lib/python2.7/site-packages/magi/static/less/mixins/magicircles.less";

{less}

@import "style.less";

{extra}
    """.format(less=less, extra=extra_prod)

    if name:
        filename = u'{}_theme_prod.less'.format(name)
    else:
        filename = 'prod.less'
    path = os.path.join(django_settings.BASE_DIR, django_settings.SITE, 'static', 'less', filename)

    with open(path, 'w+') as f:
        f.write(prod_less.encode('UTF-8'))
        f.close()

    if name:
        filename = u'{}.css'.format(name)
    else:
        filename = 'style.css'
    css_path = os.path.join(django_settings.BASE_DIR, django_settings.SITE, 'static', 'css', filename)

    print css_path
    os.system(u'lessc {path} {css_path}'.format(path=path, css_path=css_path))

class Command(BaseCommand):
    can_import_settings = True

    def handle(self, *args, **options):

        generateStylesheets()

        for season_name, season in SEASONS.items():
            for variable in CSS_SETTINGS:
                if variable in season:
                    generateStylesheets(name=season_name, settings=season)
                    break
